import os
import shutil
import glob
import platform


dest_dir = "@CMAKE_CURRENT_BINARY_DIR@"
example_raster_dir = os.path.join("@PROJECT_BINARY_DIR@", "documentation", "pcraster_manual", "examples")

# Cleanup

shutil.rmtree(os.path.join(dest_dir, "validated"), ignore_errors=True)
shutil.rmtree(os.path.join(dest_dir, "apiExamplesData"), ignore_errors=True)
shutil.rmtree(os.path.join(dest_dir, "apiExamples"), ignore_errors=True)
shutil.rmtree(os.path.join(dest_dir, "testdata"), ignore_errors=True)
shutil.rmtree(os.path.join(dest_dir, "stackReader"), ignore_errors=True)
shutil.rmtree(os.path.join(dest_dir, "rundir_dir1"), ignore_errors=True)
shutil.rmtree(os.path.join(dest_dir, "allStatisticsResults"), ignore_errors=True)


paths = glob.glob(os.path.join(dest_dir, "tmp*"))
paths += glob.glob(os.path.join(dest_dir, "*_tmp*"))
paths += glob.glob(os.path.join(dest_dir, "rundir_*"))



for p in paths:
    if os.path.isdir(p):
        shutil.rmtree(p, ignore_errors=True)
    else:
        os.remove(p)




# rm -rf ModelBuilder*
# rm -rf tmp*
# rm -rf *_tmp*


#shutil.copytree(os.path.join("@CMAKE_CURRENT_SOURCE_DIR@", "testdata"), dest_dir) ##os.path.join(dest_dir, "testdata"))

paths = glob.glob(os.path.join("@CMAKE_CURRENT_SOURCE_DIR@", "testdata", "*"))
for p in paths:
    if os.path.isdir(p):
      head, tail = os.path.split(p)
      shutil.copytree(p, os.path.join(dest_dir, tail))
    else:
      shutil.copy(p, dest_dir)

shutil.copy(os.path.join("@CMAKE_CURRENT_SOURCE_DIR@", "..", "xmlschema", "commonTypes.xsd"), dest_dir)
shutil.copy(os.path.join("@CMAKE_CURRENT_SOURCE_DIR@", "PCRaster.xsd"), dest_dir)



shutil.copy(os.path.join("@CMAKE_CURRENT_SOURCE_DIR@", "..", "python", "applications", "LinkOutTestDriver", "dynamicModel.xml"), os.path.join(dest_dir, "PCRasterLinkOutTestPyDynamicModel.xml"))

filenames = glob.glob(os.path.join("@CMAKE_CURRENT_SOURCE_DIR@", "testdata", "apiExamplesData", "*"))
for f in filenames:
    shutil.copy(os.path.join("@CMAKE_CURRENT_SOURCE_DIR@", "testdata", "apiExamplesData", f), dest_dir)


# # windows problem
# chmod -R a+rwx ./*
#

if platform.system() == 'Windows':
  sfile = "example1.dll"
  dfile = "noXMLLinkIn.dll"
elif platform.system() == 'Darwin':
  sfile = "libexample1.dylib"
  dfile = "libnoXMLLinkIn.dylib"
elif platform.system() == 'Linux':
  sfile = "libexample1.so"
  dfile = "libnoXMLLinkIn.so"
else:
  raise RuntimeError("Unknown platform in model engine unit tests")

shutil.copy(os.path.join("@EXECUTABLE_OUTPUT_PATH@", "@CMAKE_CFG_INTDIR@", sfile), os.path.join("@EXECUTABLE_OUTPUT_PATH@", "@CMAKE_CFG_INTDIR@", dfile))



filenames = glob.glob(os.path.join(example_raster_dir, "*.map"))
for f in filenames:
    shutil.copy(f, dest_dir)

filenames = glob.glob(os.path.join(example_raster_dir, "*.txt"))
for f in filenames:
    shutil.copy(os.path.join(example_raster_dir, "demo", f), dest_dir)

#shutil.copytree(os.path.join("@PROJECT_SOURCE_DIR@", "documentation", "pcraster_manual", "examples", "validated"), os.path.join(dest_dir, "validated"))
filenames = glob.glob(os.path.join("@PROJECT_SOURCE_DIR@", "documentation", "pcraster_manual", "examples", "validated", "*"))
for f in filenames:
    shutil.copy(f, os.path.join(dest_dir, "validated"))


# # add more to the validated created
#shutil.copytree(os.path.join("@CMAKE_CURRENT_SOURCE_DIR@", "testdata", "validated", "allStatisticsResults"), os.path.join(dest_dir, "validated", "allStatisticsResults"))

filenames = glob.glob(os.path.join("@CMAKE_CURRENT_SOURCE_DIR@", "testdata", "validated", "*"))
for f in filenames:
    if os.path.isfile(f):
        shutil.copy(f, dest_dir)



# allStatistics.xml expect a sub directory to be present
os.mkdir(os.path.join(dest_dir, "allStatisticsResults"))

shutil.copy(os.path.join("@CMAKE_CURRENT_SOURCE_DIR@", "messagestest.xml"), dest_dir)

# # tests from messagestest.xml and more
filenames = glob.glob(os.path.join("@PCRASTER_DATA_DIR@", "test", "pcrtree", "small", "*.map"))
filenames += glob.glob(os.path.join("@PCRASTER_DATA_DIR@", "test", "pcrtree", "small", "all1_float.*"))
filenames += glob.glob(os.path.join("@PCRASTER_DATA_DIR@", "test", "pcrtree", "small", "*.tbl"))
filenames += glob.glob(os.path.join("@PCRASTER_DATA_DIR@", "test", "pcrtree", "small", "*.tss"))
filenames += glob.glob(os.path.join("@PCRASTER_DATA_DIR@", "test", "pcrtree", "small", "*.ipcr"))
for f in filenames:
    shutil.copy(f, dest_dir)


os.makedirs(os.path.join(dest_dir, "rundir_dir1", "dir2", "dir3"))


shutil.copy(os.path.join(dest_dir, "binding.ipcr"), os.path.join(dest_dir, "rundir_dir1"))

os.mkdir(os.path.join(dest_dir, "stackReader"))

shutil.copy(os.path.join(dest_dir, "inp5s.map"), os.path.join(dest_dir, "stackReader", "tmp00000.001"))

shutil.copy(os.path.join(dest_dir, "inp5s.map"), os.path.join(dest_dir, "validated", "TesterTest.map"))
shutil.copy(os.path.join(dest_dir, "inp1s.map"), os.path.join(dest_dir, "validated", "TesterTest1s.map"))
shutil.copy(os.path.join(dest_dir, "inp1s.map"), os.path.join(dest_dir, "validated", "TesterOption.map"))
shutil.copy(os.path.join(dest_dir, "inp5s_all.map"), os.path.join(dest_dir, "validated", "TesterClone.map"))


